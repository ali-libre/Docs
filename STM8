stm8 docs::
startup informaation::
http://embedonix.com/category/articles/embedded-projects/
https://www.ondrovo.com/a/20170107-stm8-getting-started/ 
http://www.electroons.com/blog/stm8-development-tools-set-up-in-gnulinux-systems/
http://levinic.com/programming-ports-and-registers-in-stm8/
http://blog.mark-stevens.co.uk/2012/07/configuring-the-stm8s-system-clock-the-way-of-the-register/
|||||||||||||||||||||||||||
https://stm8-binutils-gdb.sourceforge.io/
|||||||||||||||||||||||||||



it's better to install sdcc-svn from AUR
stm8-spl-sdcc and also stm8flash-git

it's important 
in p-p port mode load must to connect to vcc
programmer can be stay and no problem


stm8-clock config::
void InitialiseSystemClock()
{
CLK_ICKR = 0;                       //  Reset the Internal Clock Register.
CLK_ICKR_HSIEN = 1;                 //  Enable the HSI.
CLK_ECKR = 0;                       //  Disable the external clock.
while (CLK_ICKR_HSIRDY == 0);       //  Wait for the HSI to be ready for use.
CLK_CKDIVR = 0;                     //  Ensure the clocks are running at full speed.
CLK_PCKENR1 = 0xff;                 //  Enable all peripheral clocks.
CLK_PCKENR2 = 0xff;                 //  Ditto.
CLK_CCOR = 0;                       //  Turn off CCO.
CLK_HSITRIMR = 0;                   //  Turn off any HSIU trimming.
CLK_SWIMCCR = 0;                    //  Set SWIM to run at clock / 2.
CLK_SWR = 0xe1;                     //  Use HSI as the clock source.
CLK_SWCR = 0;                       //  Reset the clock switch control register.
CLK_SWCR_SWEN = 1;                  //  Enable switching.
while (CLK_SWCR_SWBSY != 0);        //  Pause while the clock switch is busy.
}
